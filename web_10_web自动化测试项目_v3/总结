# web 自动化测试测 ui, 找前端
# 接口自动化测试测 数据，找 后端


# PO 模式  ==》 Page Object Model  ==> POM
# 页面对象模型
# 讲实际需要操作的页面的各种操作或者是逻辑，属性封装在一个页面对象当中。
# 对象调用行为非常简单，obj.login()
# 继承。
# DOM

# 得到的好处是什么？？
# 测试用例方法当中省去很多代码，提高代码的可读性。
# 省去的代码放到了独立的类当中，
# 封装的代码（页面行为）可以重复使用。
# 分开了 2 个部分的代码：测试逻辑； 业务逻辑（页面逻辑）
# 提高了代码的可维护性。
# 1， 页面发生变化只需要改对应的页面类
# 2，测试需求发生变化只需要修改对应的测试用例的方法。


# 如果使用了 ddt 数据驱动，需要在空白行运行测试用例。



# locator 封装
场景1： 前段工程师修改了元素定位，我们需要去审查每一个方法，看是否需要进行修改。（元素定位方式写死了。）
场景2:  需求修改元素定位方式， xpath --> css, 也需要审查每一个方法。

把所有的 元素定位表达式提取出来封装，集中管理。
- 1， 配置文件
- 2， 可以封装成类属性；
- 3， 可以封装成类。


# 提升测试效率
一次浏览器的测试用例的执行流程：把浏览器初始化动作放到 setUpClass 当中。
不需要每一次执行测试用例的时候单独初始化浏览器。

额外注意的事项：需要清空数据，为了保持测试用例的独立性。
在提升测试效率的同时，一定要保持测试用例的独立性。

# 如果独立性不能保持，稳定性， 就不要去提升效率

# host 放到配置文件
# login_url 1， 放到配置文件； 2

# 定位元素基本上都可以封装成一个函数
